from brian2 import *
import matplotlib.pyplot as plt

start_scope()
duration = 250*ms
I_off = 0 * mV
I_on = 10 * mV


# Code MPE neuron first
EK = -90*mV               # Potassium #-90
ENa = 70*mV               # Sodium #30 #50
El = -10.6 * mV          # Leak -10.6mV
gl = 0.33      # 0.33


neuron_type = 'MPE' # Change this: MPE variables
theta_eq = -53*mV
tau_theta = 2.0*ms
tau_spike = 1.75*ms
t_spike = 2.0*ms
tau_m = 15*ms
gNa = 0.14
gK = 3.0 #1.0


LIFeqs = '''
            dv/dt = ((-gNa*(v-ENa) - gK*(v-EK) - gl*(v-El) + I_app))
                    / tau_m    
                    - int(v > theta_eq) * int(t < (lastspike + t_spike)) * ((v - ENa) / (tau_spike))
                          : volt
            I_app = I_app_fn(t) : volt
'''
# Substitute the parameters for the required neuron type before simulation run, values below.
'''
MPE_theta_eq = -53*mV 
MPE_tau_theta = 2.0*ms
MPE_tau_spike = 1.75*ms
MPE_t_spike = 2.0*ms
MPE_tau_m = 15*ms
MPE_gNa = 0.14
MPE_gK = 3.0 #1.0

MP5_theta_eq = -53*mV
MP5_tau_theta = 0.5*ms 
MP5_tau_spike = 0.6*ms
MP5_t_spike = 0.75*ms
MP5_tau_m = 13*ms
MP5_gNa = 0.14
MP5_gK = 2.3 #1.3

MPI_theta_eq = -54*mV
MPI_tau_theta = 1.0*ms
MPI_tau_spike = 0.48*ms
MPI_t_spike = 0.75*ms
MPI_tau_m = 7*ms
MPI_gNa = 0.2
MPI_gK = 3.0 #1.0

THA_theta_eq = -54*mV
THA_tau_theta = 1.0*ms
THA_tau_spike = 0.48*ms
THA_t_spike = 0.75*ms
THA_tau_m = 7*ms 
THA_gNa = 0.2 
THA_gK = 3.0 #1.0

EK = -90*mV               # Potassium #-90
ENa = 70*mV               # Sodium #30 #50
El = -10.6 * mV          # Leak -10.6mV
gl = 0.33      # 0.33

C = 0.85
'''

I_app_fn = TimedArray([I_off, I_on], dt=20*ms)
N = 1
G = NeuronGroup(N, LIFeqs, threshold= 'v > theta_eq', reset= 'v = -65*mV', method='euler', refractory = 'v > theta_eq') # Wasn't sure where reset value was, so just put -65mV.
G.v = -65*mV # Initialise neruon with reset value (Resting membrane potential)

M = StateMonitor(G, variables=['v', 'I_app'], record=True)
spikemon = SpikeMonitor(G)

run(duration)

f, axs = plt.subplots(2, 1, figsize=(8, 6), gridspec_kw={'height_ratios': [3, 1]})

axs[0].plot(M.t / ms, M.v[0] / mV, 'k')  # Voltage plot
axs[1].plot(M.t / ms, M[0].I_app / mV, 'r') # Input current

axs[0].set_ylabel('voltage [mV]')
axs[0].set_title(neuron_type, fontsize=20)
axs[0].set_xticklabels([])
axs[1].set_ylabel('input current [mV] ')
axs[1].set_xlabel('Time [ms]')
'''axs[0].spines['right'].set_visible(False)
axs[0].spines['top'].set_visible(False)
axs[1].spines['right'].set_visible(False)
axs[1].spines['top'].set_visible(False)'''
plt.show()
